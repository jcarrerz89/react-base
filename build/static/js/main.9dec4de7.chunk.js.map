{"version":3,"sources":["server/ApolloClient.tsx","components/common/Brand/Logo.tsx","server/Queries/user.queries.tsx","components/user/logged_user/LoggedUser.tsx","server/Mutations/user.mutations.tsx","components/user/unlogged_user/SignIn.tsx","components/user/unlogged_user/SignUp.tsx","components/user/unlogged_user/UnloggedUser.tsx","components/user/SessionOptions.tsx","components/navbar/Navbar.tsx","components/footer/Footer.tsx","components/layout/HomeLayout/HomeLayout.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["errorLink","onError","_ref","graphQLErrors","networkError","map","_ref2","message","locations","path","alert","concat","ApolloClientInstance","ApolloClient","cache","InMemoryCache","link","from","HttpLink","uri","process","Logo","React","createElement","href","HELLO_USER","gql","_templateObject","Object","taggedTemplateLiteral","LoggedUser","react_default","a","SIGN_UP","user_mutations_templateObject","LOGIN","_templateObject2","_templateObject3","SignIn","_useCookies","useCookies","_useCookies2","slicedToArray","cookies","setCookie","_React$useState","useState","_React$useState2","open","setModalState","_React$useState3","user","password","_React$useState4","formState","setFormState","_useMutation","useMutation","onCompleted","data","login","access_token","_useMutation2","_useMutation2$","loading","error","Button","variant","className","onClick","Dialog","onClose","onSubmit","event","preventDefault","console","log","variables","request","username","DialogTitle","DialogContent","Grid","container","direction","justifyContent","alignItems","rowSpacing","item","lg","TextField","autoFocus","id","label","type","value","onChange","e","objectSpread","target","fullWidth","DialogActions","SignUp","setOpen","email","signUp","react","Alert","severity","spacing","xs","UnloggedUser","unlogged_user_SignIn","unlogged_user_SignUp","SessionOptions","_useQuery","useQuery","logged_user_LoggedUser","unlogged_user_UnloggedUser","Navbar","_useState","_useState2","setBackgroundColor","_useState3","_useState4","setFontColor","_useState5","_useState6","useEffect","toggle","window","pageYOffset","addEventListener","removeEventListener","Brand_Logo","alignContent","rowGap","user_SessionOptions","FooterContainer","styled","Paper","theme","backgroundColor","padding","color","Footer","Container","fixed","Stack","HomeLayout","children","Fragment","components_navbar_Navbar","components_footer_Footer","App","ApolloProvider","client","layout_HomeLayout_HomeLayout","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.9dec4de7.chunk.js","sourcesContent":["import {ApolloClient, from, HttpLink, InMemoryCache} from \"@apollo/client\";\nimport {onError} from '@apollo/client/link/error';\nimport { ApolloLink } from \"@apollo/client\";\nimport { getCookie, setCookie } from 'typescript-cookie'\n\nconst errorLink = onError(({graphQLErrors, networkError}) => {\n    if (graphQLErrors) {\n        graphQLErrors.map(({message, locations, path}) => {\n            alert(`graphql error ${message}`)\n        });\n    }\n});\n\nconst authMiddleware = (authToken?: any) =>\n  new ApolloLink((operation, forward) => {\n    // add the authorization to the headers\n    const authToken = getCookie('jwt-ath-token');\n    console.log(authToken);\n    if (authToken) {\n      operation.setContext({\n        headers: {\n          authorization: `Bearer ${authToken}`,\n        },\n      });\n    }\n\n    return forward(operation);\n  });\n\n\nconst ApolloClientInstance = new ApolloClient({\n    cache: new InMemoryCache(),\n    link: from([\n        errorLink, \n        new HttpLink({uri: process.env.REACT_APP_BFF})\n    ])\n});\n\nexport default ApolloClientInstance;","const Logo = () => {\n    return <div>\n        <a href={'/'}>\n            <h1>Blue Bells</h1>\n        </a>\n        <label>{process.env.NODE_ENV}</label>\n    </div>\n    \n}\n\nexport default Logo;","\nimport { gql } from '@apollo/client';\n\nexport const HELLO_USER = gql`\n    query helloUser {\n        helloUser\n    }\n`;","import React from \"react\";\n\nconst LoggedUser = () => {\n\n    return (\n        <div>\n            <label>Username</label>\n            <label>Logout</label>\n        </div>\n    )\n}\n\nexport default LoggedUser;","import { gql } from '@apollo/client';\n\nexport const SIGN_UP = gql`\n        mutation signUp($username: String!, $email: String!, $password: String!) { \n            signUp(username: $username, email: $email, password: $password){\n                email\n            } \n        }\n    `;\n\nexport const LOGIN = gql`\n        mutation login($request: LoginRequest!) {\n            login(request: $request) {\n                user { \n                    username\n                }, \n                access_token\n            }\n        }\n`;\n\nexport const REGISTER = gql`\n        mutation register($email: String!) { \n            signUp(email: $email){\n                email\n            } \n        }\n    `;","import Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport React from \"react\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport TextField from \"@mui/material/TextField\";\nimport Grid from \"@mui/material/Grid\";\nimport DialogActions from \"@mui/material/DialogActions\";\nimport {LOGIN} from \"../../../server/Mutations/user.mutations\";\nimport { useMutation } from '@apollo/client';\nimport { useCookies } from 'react-cookie';\n\nconst SignIn: React.FC = () => {\n\n    const [cookies, setCookie] = useCookies(['auth-jwt-token']); \n    const [open, setModalState] = React.useState(false);\n    const [formState, setFormState] = React.useState({\n        user: '',\n        password: ''\n    });\n\n    const [login, {data, loading, error}] = useMutation(LOGIN, {\n        onCompleted: (data) => {\n            setCookie('auth-jwt-token', data.login.access_token);\n        }\n    });\n\n    if (cookies['auth-jwt-token']) {\n        return <div>user</div>\n    }\n\n    return (\n        <div>\n            <Button variant=\"outlined\" className=\"pull-right\" onClick={() => {\n                setModalState(true);\n            }}>Sign In\n            </Button>\n\n            <Dialog open={open} onClose={() => {\n                setModalState(true);\n            }}>\n                <form onSubmit={(event) => {\n                    event.preventDefault();\n\n                    console.log('submit');\n                    login({\n                        variables: {\n                            request: {\n                                username: formState.user,\n                                password: formState.password\n                            }\n                        }\n                    });\n                }}>\n                    <DialogTitle>Sign In</DialogTitle>\n                    <DialogContent>\n                        <br/>\n                        <Grid container direction=\"row\" justifyContent={\"flex-start\"} alignItems=\"flex-start\"\n                            rowSpacing={4}>\n                            <Grid item lg={12}>\n                                <TextField autoFocus\n                                        id=\"user\"\n                                        label=\"Email or Username\"\n                                        type=\"text\"\n                                        value={formState.user}\n                                        onChange={e => {\n                                            setFormState({\n                                                ...formState,\n                                                user: e.target.value\n                                            })\n                                        }}\n                                        fullWidth></TextField>\n                            </Grid>\n                            <Grid item lg={12}>\n                                <TextField autoFocus\n                                        id=\"user\"\n                                        label=\"Password\"\n                                        type=\"password\"\n                                        value={formState.password}\n                                        onChange={e => {\n                                            setFormState({\n                                                ...formState,\n                                                password: e.target.value\n                                            })\n                                        }}\n                                        fullWidth></TextField>\n                            </Grid>\n                        </Grid>\n                    </DialogContent>\n\n                    <DialogActions>\n                        <Grid container direction=\"row\" justifyContent={\"right\"}\n                            rowSpacing={6}>\n                            <Grid item lg={3}>\n                                <Button variant=\"text\" onClick={() => {\n                                    setModalState(false);\n                                }}>Cancel</Button>\n                            </Grid>\n                            <Grid item lg={3}>\n                                <Button variant=\"contained\" type=\"submit\">Sign in</Button>\n                            </Grid>\n                        </Grid>\n                    </DialogActions>\n                </form>\n            </Dialog>\n        </div>\n    );\n}\n\nexport default SignIn;","import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport {SIGN_UP} from '../../../server/Mutations/user.mutations';\nimport {useMutation} from '@apollo/client';\nimport {Alert} from \"@mui/material\";\nimport {Label} from \"@mui/icons-material\";\nimport Grid from \"@mui/material/Grid\";\n\nconst SignUp: React.FC = () => {\n\n    const [open, setOpen] = React.useState(false);\n    const [formState, setFormState] = React.useState({\n        username: '',\n        email: '',\n        password: ''\n    })\n\n    const [signUp, {data, loading, error}] = useMutation(SIGN_UP);\n\n    if (loading) return (<label>'Submitting...'</label>);\n    if (error) return (<label>`Submission error! ${error.message}`</label>);\n    if (data) return (\n        <Alert severity=\"success\">\n            This is a success alert — <strong>check it out!</strong>\n        </Alert>\n    )\n\n    return (\n        <div>\n            <Button variant=\"contained\" className=\"pull-right\" onClick={() => {\n                setOpen(true)\n            }}>\n                Sign up\n            </Button>\n            <Dialog open={open} onClose={() => {\n                setOpen(false)\n            }}>\n                <form\n                    onSubmit={(event) => {\n                        event.preventDefault();\n\n                        signUp({\n                            variables: {\n                                username: formState.username,\n                                email: formState.email,\n                                password: formState.password\n                            }\n                        })\n                    }}>\n                    <DialogTitle>\n                        Sign up\n                    </DialogTitle>\n                    <DialogContent>\n                        <Grid container spacing={2}>\n                            <Grid item xs={12}>\n                                <TextField\n                                    autoFocus\n                                    // variant=\"standard\"\n                                    id=\"username\"\n                                    label=\"Username\"\n                                    type=\"text\"\n                                    value={formState.username}\n                                    fullWidth\n                                    onChange={(e) =>\n                                        setFormState({\n                                            ...formState,\n                                            username: e.target.value\n                                        })\n                                    }></TextField>\n                            </Grid>\n\n                            <Grid item xs={12}>\n                                <TextField\n                                    autoFocus\n                                    // variant=\"standard\"\n                                    id=\"email\"\n                                    label=\"Email Address\"\n                                    type=\"email\"\n                                    fullWidth\n                                    value={formState.email}\n                                    onChange={(e) => setFormState({\n                                        ...formState,\n                                        email: e.target.value\n                                    })}></TextField>\n                            </Grid>\n\n                            <Grid item xs={12}>\n                                <TextField autoFocus\n                                           id=\"user\"\n                                           label=\"Password\"\n                                           type=\"password\"\n                                           value={formState.password}\n                                           onChange={e => {\n                                               setFormState({\n                                                   ...formState,\n                                                   password: e.target.value\n                                               })\n                                           }}\n                                           fullWidth></TextField>\n                                <br/>\n                            </Grid>\n\n                            <Grid item xs={8}>\n                                <label>Already have an account? Sign in</label>\n                            </Grid>\n                        </Grid>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button variant=\"text\" onClick={() => {\n                            setOpen(false)\n                        }}>Cancel</Button>\n                        <Button variant=\"contained\" type=\"submit\">Sign up</Button>\n                    </DialogActions>\n                </form>\n            </Dialog>\n        </div>\n    );\n}\n\nexport default SignUp","import React from \"react\";\nimport SignIn from \"./SignIn\";\nimport SignUp from \"./SignUp\";\n\nconst UnloggedUser = () => {\n    return (\n        <div>\n            <SignIn></SignIn>\n            <SignUp></SignUp>\n        </div>\n    );\n}\n\nexport default UnloggedUser; ","// import { HELLO_USER } from \"@/server/Queries/user.queries\";\nimport { HELLO_USER } from \"./../../server/Queries/user.queries\";\nimport { useQuery } from \"@apollo/client\";\nimport React from \"react\";\nimport { useCookies } from \"react-cookie\";\nimport LoggedUser from \"./logged_user/LoggedUser\";\nimport UnloggedUser from \"./unlogged_user/UnloggedUser\";\n\nconst SessionOptions: React.FC = () => {\n    const [cookies] = useCookies();\n\n    const {data, loading, error} = useQuery(HELLO_USER);\n\n    if (error) {\n        return <label>Error :(</label>\n    }\n\n    if (loading) {\n        return <label>Loading...</label>\n    }\n\n    if (data) \n        return (\n            <LoggedUser></LoggedUser>\n        );\n\n    return (\n        <UnloggedUser></UnloggedUser>\n    );\n}\n\nexport default SessionOptions;","import {useEffect, useState} from 'react';\nimport './Navbar.css';\nimport Grid from \"@mui/material/Grid\"\nimport Button from '@mui/material/Button';\nimport SearchBar from '../searchBar/SearchBar';\nimport Logo from '../common/Brand/Logo';\nimport {FC} from 'react';\nimport SessionOptions from '../user/SessionOptions';\n\nconst Navbar: FC = () => {\n\n    const [backgroundColor, setBackgroundColor] = useState(\"transparent\");\n    const [fontColor, setFontColor] = useState(\"white\");\n    const [padding, setPadding] = useState('1rem 2rem');\n\n    const transparentMode = () => {\n        setBackgroundColor('transparent');\n        setFontColor('white');\n        // onCollapse(false);\n    };\n\n    const whiteMode = () => {\n        setBackgroundColor('white');\n        setFontColor('black');\n        // onCollapse(true);\n    }\n\n    const darkMode = () => {\n\n    }\n    \n    const onCollapse = (collapse: boolean) => {\n        \n        if (collapse) {\n            setPadding('1rem 1rem');\n        } else {\n            setPadding('1rem 2rem');\n        }\n    }\n\n\n    useEffect(() => {\n        const toggle = () => {\n            let scrollPosition = window.pageYOffset\n            if (scrollPosition < 100) {\n                transparentMode()\n            } else {\n                whiteMode()\n            }\n        }\n\n        function watchScroll() {\n            window.addEventListener(\"scroll\", toggle);\n        }\n\n        watchScroll();\n        return () => {\n            window.removeEventListener(\"scroll\", toggle);\n        };\n    });\n\n    return (\n        <div className=\"search-bar-container\">\n            <div className='navbar'>\n                <Grid container spacing={3}>\n                    <Grid item xs={10}>\n                        <Logo></Logo>\n                    </Grid>\n                    <Grid item xs={2} alignContent={'right'} rowGap={4}>\n                        <SessionOptions></SessionOptions>\n                    </Grid>\n                </Grid>\n            </div>\n        </div>\n    )\n}\n\nexport default Navbar","import './Footer.css'\nimport Grid from '@mui/material/Grid'\nimport Stack from '@mui/material/Stack'\nimport Container from '@mui/material/Container'\nimport {styled} from '@mui/material/styles'\nimport Paper from '@mui/material/Paper'\n\nconst FooterContainer = styled(Paper)(({theme}) => ({\n    backgroundColor: '#05204A',\n    padding: '3rem 3rem 1rem 3rem',\n    color: '#FFF'\n}));\n\nconst Footer = () => {\n    return (\n        <FooterContainer>\n            <Container fixed>\n                <Grid container spacing={6}>\n                    <Grid item xs={4}>\n                        <h1>Blue Bells</h1>\n                    </Grid>\n                    <Grid item xs={4}>\n                        <Stack spacing={3}>\n                            <a href={'/about'}>\n                                About\n                            </a>\n                            <a href={'/who-use-us'}>\n                                What's new\n                            </a>\n                            <a href={'/about'}>\n                                Who use use\n                            </a>\n                        </Stack>\n                    </Grid>\n\n                    <Grid item xs={4}>\n                        <Stack spacing={3}>\n                        </Stack>\n                    </Grid>\n                </Grid>\n                <Grid container spacing={1}>\n                    <Grid item xs={6}>\n                        <small>Created by team L&J</small>\n                    </Grid>\n                    <Grid item xs={6}>\n                    </Grid>\n                </Grid>\n            </Container>\n        </FooterContainer>\n    )\n}\n\nexport default Footer;","import './HomeLayout.css';\nimport Navbar from '../../navbar/Navbar'\nimport Footer from '../../footer/Footer'\nimport {FC} from \"react\";\n\nconst HomeLayout: FC<{children: React.ReactNode}> = (children) => {\n    return (\n        <>\n            <Navbar />\n            <div className={'cover'}>\n            </div>\n\n            {children.children}\n\n            <Footer />\n        </>\n    )\n}\n\nexport default HomeLayout;","import React from 'react';\nimport './App.css';\nimport {ApolloProvider} from \"@apollo/client\";\nimport ApolloClient from './server/ApolloClient';\nimport HomeLayout from './components/layout/HomeLayout/HomeLayout';\n\nfunction App() {\n  return (\n      <ApolloProvider client={ApolloClient}>\n          <HomeLayout>\n\n          </HomeLayout>\n      </ApolloProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}